---
layout: default
title: Розгортання Rails Girls на Heroku
permalink: heroku
---

# Розгортання проекту на Heroku

*Created by Terence Lee, [@hone02](https://twitter.com/hone02)*

### Встановлення інструментів Heroku та налаштування доступу

<<<<<<< HEAD
Для початку необхідно встановити [Heroku Toolbelt](https://devcenter.heroku.com/articles/getting-started-with-ruby#set-up) та [зареєструватись](https://signup.heroku.com/dc) на сервісі Heroku.
Далі у командному рядку слід виконати наступну команду, у відповідь на запрошення ввести ім'я новоствореного користувача та пароль:

{% highlight sh %}
heroku login
{% endhighlight %}

**Наставник:** Розповісти про переваги використання Heroku на противагу традиційним сервісам.

### Підготуємо проект

#### Система контролю версій (VCS - Version Control System)

Зараз нам потрібно додати проект у систему контролю версій. Для цього слід виконати в командному рядку наступну послідовність команд:
=======
Перейди на інструкцію [Getting Started on Heroku with Ruby][heroku-guide] та
виконай кроки "Introduction", кроки від "Set up"до "Sign up", крок "install the
Heroku CLI", та "login".

### Підготуємо проект

Ми повинні додати систему контролю версій до твого коду. Ти можеш це зробити, виконавши
наступні команди у терміналі:
>>>>>>> heroku transaltion

{% highlight sh %}
git init
git add .
git commit -m "initial commit"
{% endhighlight %}

<<<<<<< HEAD
**Наставник:** Зараз є хороша можливсть поговорити про системи контролю версій та, зокрема, git. Також варто пояснити про файл `.gitignore` та його вміст, а також чому не потрібно завантажувати деякі файли в репозиторій.

#### Зміна конфігурації бази даних

Перш за все, нам потрібно, щоб на Heroku працювала база даних. Heroku та твоє локальне середовище використовують зовсім різні бази даних (локально - SQLite; на Heroku - PostgreSQL), тому потрібно внести певні зміни у файл Gemfile. Необхідно замінити цей рядок
=======
__Ментор__: Це добрий час, щоб поговорити про систему контролю версій та git.

#### Зміна конфігурації бази даних

Спочатку нам потрібно, аби наша база даних запрацювала на Heroku, який використовує
базу даних, що відрізняєтся від нашої. Будь ласка, заміни у Gemfile:
>>>>>>> heroku transaltion

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

на наступний фрагмент:

{% highlight ruby %}
group :development do
  gem 'sqlite3'
end
group :production do
  gem 'pg'
end
{% endhighlight %}

Далі слід виконати команду `bundle install --without production`, щоб завантажити
та встановити необхідні бібліотеки.

<<<<<<< HEAD
Не забудьте виконати команди `git add .` та `git commit -m "Use postgres as production database"`
щоб додати ваші зміни до гілки `master` перед подальшою публікацією на heroku.

**Наставник:** Тут можна поговорити про різні реляційні бази даних, а також розповісти про особливу роль БД PostgreSQL у середовищі Heroku.

#### Додаємо rails_12factor

Далі нам потрібно додати бібліотеку `rails_12factor` до Gemfile, щоб мати змогу розгорнути проект на Heroku.

Цей gem змінює конфігурацію Rails проекту для сумісності з Heroku. Наприклад, змінюється спосіб ведення лог-файлів та конфігурація статичних ресурсів (малюнки, CSS стилі, скрипти JavaScript) - так, щоб враховувались особливості середовища Heroku.

Будь ласка, заміни цей фрагмент у Gemfile:

{% highlight ruby %}
group :production do
  gem 'pg'
end
{% endhighlight %}

на наступний:

{% highlight ruby %}
group :production do
  gem 'pg'
  gem 'rails_12factor'
end
{% endhighlight %}

Після цього виконай команду `bundle install` та додай змінені файли в репозиторій:

{% highlight sh %}
git commit -a -m "Added rails_12factor gem and updated Gemfile.lock"
{% endhighlight %}

**Наставник:** Можна поговорити про логування та інші особливості роботи з Heroku.
=======
Не забудь зробити `git add .` та `git commit -m "Use postgres as production database"`
на master вітці перед пушем на heroku.

__Ментор__: Тут можна поговорити про RDBMS та різницю між ними, плюс додай трохи
деталей про залежність Heroku від PostgreSQL.
>>>>>>> heroku transaltion

### Розгортання проекту

#### Створення нового застосунку на Heroku

<<<<<<< HEAD
Для створення нового Heroku додатка потрібно виконати в терміналі команду `heroku create`. В результаті вийде щось типу цього:
=======
Ми повинні створити наш Heroku застосунок набравши `heroku create` у терміналі
і маємо побачити подібне:
>>>>>>> heroku transaltion

{% highlight sh %}
Creating app... done, ⬢ young-reaches-87845
https://young-reaches-87845.herokuapp.com/ | https://git.heroku.com/young-reaches-87845.git
{% endhighlight %}

<<<<<<< HEAD
Тут "young-reaches-87845" - автоматично згенерована назва Heroku додатка. Можна вказати і свою назву, але вона має бути унікальною (скоріше за все, назви "railsgirls" та "helloworld" вже хтось використав до тебе, тому доведеться придумати щось оригінальніше).

#### Публікуємо код

Тепер потрібно завантажити готовий код проекту у репозиторій Heroku (все решта буде зроблено автоматично). Для цього треба виконати в терміналі команду `git push heroku master`; результат буде виглядати приблизно так:
=======
У даному випадку "young-reaches-87845" назва твого застосунку.

#### Публікуємо код

Далі, ми повинні запушити наш код на heroku, набравши `git push heroku master`.
Ти побачиш у терміналі наступне:
>>>>>>> heroku transaltion

{% highlight sh %}
Counting objects: 115, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (97/97), done.
Writing objects: 100% (115/115), 25.62 KiB | 0 bytes/s, done.
Total 115 (delta 10), reused 0 (delta 0)
remote: Compressing source files... done.
remote: Building source:
remote:
remote: -----> Ruby app detected
remote: -----> Compiling Ruby/Rails
remote: -----> Using Ruby version: ruby-2.2.4
remote: -----> Installing dependencies using bundler 1.11.2
remote:        Running: bundle install --without development:test --path vendor/bundle --binstubs vendor/bundle/bin -j4 --deployment
remote:        Fetching gem metadata from https://rubygems.org/..........
remote:        Fetching version metadata from https://rubygems.org/...
remote:        Fetching dependency metadata from https://rubygems.org/..
remote:        Installing concurrent-ruby 1.0.2
...
remote: -----> Launching...
remote:        Released v5
remote:        https://young-reaches-87845.herokuapp.com/ deployed to Heroku
remote:
remote: Verifying deploy... done.
To https://git.heroku.com/young-reaches-87845.git
 * [new branch]      master -> master
{% endhighlight %}

Коли з'явиться рядок "Launching... done", це означає, що твій додаток опублікований. Ура!

#### Міграція бази даних

Далі слід мігрувати базу даних - щось подібне ти вже робила на локальному середовищі. Зараз ця команда виглядатиме так:

{% highlight sh %}
heroku run rake db:migrate
{% endhighlight %}

### Затамувавши подих, запускаємо!

Тепер можна спробувати зайти на адресу програми і подивитись результат у браузері. Адреса (URL) буде виглядати якось так: <https://young-reaches-87845.herokuapp.com/> (звісно, замість ідентифікатора 'sheltered-refuge-6377' буде щось інше). Ще один цікавий спосіб - виконати в терміналі команду `heroku open`, і браузер сам відкриється на потрібній сторінці.

Платформа Heroku не без своїх примх. Проекти, що живуть на Heroku працюють у "ефемерному"
середовищі - мається на увазі, що (окрім інформації, що зберігається у твоїй базі даних)
будь-який файл, що буде створений твоїм застосунком зникне при перезавантаженні проекту
(наприклад при пуші нових змін)

###### [Ефемерна файлова система][ephemeral-filesystem]

> Коже [dyno (контейнер)](https://www.heroku.com/dynos) отримує свою ефемерну
> файлову систему, із свіжим кодом, що був
> недавно задеплоєний. Протягом життя dyno, його процеси можуть використовувати
> файлову систему як тимчасове сховише, і всі файли, що були записані, є невидимими
> для інших процесів у інших dyno і кожен файл буде видалений у момент видалення
> чи перезапуску dyno. Для прикладу, це трапляється кожного разу, коли dyno
> міняється через деплой застосунку і як правило раз на день як частина нормального
> управління dyno.

У [App](/app) посібнику є можливість прикріпляти файли до Idea записів, в
результаті чого нові файли записуються у папку твого застосунку `public/uploads`.
Ефемерна файлова система у Heroku може бути побачена за допомогою наступних кроків:


1. Запусти додаток у браузері `heroku open`
2. Додай нову Idea із зображенням
3. Перезапусти додаток за допомогою `heroku restart`
4. Вернись назад до Idea та перезавантаж сторінку - зображення повинне пропасти

[ephemeral-filesystem]: https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem

##### Як жити із Ефемерною файловою системою?

Звісно, це виглядає не дуже круто, якщо ти маєш реальний проект, але є шляхи
для вирішення цієї проблеми, яку використовує багато веб-сайтів.

Найбільш поширений метод - використовувати зовнішнє сховище асетів(файлів) наприклад
Amazon S3 (Simple Storage Service) чи Rackspace CloudFiles. Ці сервіси
(за низьку ціну - зазвичай менше $0.10 за GB) це сховища "у хмарі" (мається на увазі,
що файли потенційно можуть хоститись буть-де), які твій застосунок може використовувати
для зберігання файлів.

Оскільки ця функціоналість трішки виходить за межі даного посібника, є ресурси, де
ти можеш знайти інформаію, як реалізувати подібне:

* [How to: Make Carrierwave work on Heroku](https://github.com/carrierwaveuploader/carrierwave/wiki/How-to%3A-Make-Carrierwave-work-on-Heroku)
* [Amazon S3 – The Beginner’s Guide](http://www.hongkiat.com/blog/amazon-s3-the-beginners-guide/)

Звісно, якщо тобі потрібна допомога чи більше інформації, твої ментори будуть готові допомогти.
