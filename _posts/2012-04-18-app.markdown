---
layout: default
title: Rails Girls App Tutorial
permalink: app
---

# Rails Girls App Tutorial

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**Переконайтесь, що у вас встановлено Rails.** Якщо ж ні, [**скористайтесь інструкціями для встановлення**](/install).


## Знайомство з інструментами

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>

### Текстовий редактор

* [Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com),  Vim та Emacs є прикладами текстових редакторів, що можуть використовуватись для написання коду та редагування файлів.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Термінал (також відомий як Командний Рядок у Windows)

* Тут ви стартуєте сервер rails та виконуєте команди.
* Термінал це програма на вашому комп'ютері, яку можна запустити використовуючи пошук Spotlight на Mac (пошукайте "Terminal") або шукаючи "Командний рядок" у ваших програмах на Windows


<h3><i class="icon-browser">&nbsp;</i></h3>

### Веб оглядач

* (Firefox, Safari, Chrome) знадобляться вам для перегляду створеного вами додатку.

</div>


Під час проходження інструкцій ви будете бачити частинки коду, відформатовані як:

{% highlight sh %}
some code
{% endhighlight %}

<div>
<p>Це означатиме, що виділений текст є кодом і повинен бути виконаний або надрукований у одному із файлів проекту. Іконка одразу після виділеного тексу підкаже вам, що саме використовувати.</p>
<p>До прикладу, якщо ви бачите іконку терміналу після виділеного тексу, як у прикладі зверху, то вам потрібно скопіювати команду(и) і виконати її у вашому терміналі (Terminal в Mac & Command Prompt у Widnows)</p>
</div>

Need some reminders along the way? Check out this [handy cheatsheet for Ruby, Rails, console etc.](http://www.pragtob.info/rails-beginner-cheatsheet/)

### Важливо

Важлива ремарка: ви повинні обрати інструкції відповідно до вашої операційної системи, оскільки команди, які потрібно виконати на Windows дещо відрізняються від команд для Mac або Linux. Якщо ви стикнулись із проблемами — перевірте перемикач операційних систем знизу під командами. У випадку, якщо ви користуєтесь cloud service (наприклад Codeenvy), використовуйте команди, призначені для Linux (навіть у випадку, якщо ви у цей час користуєтесь Windows).

## *1.*Створення додатку

Ми створимо новий Rails додаток і назвемо його *railsgirls*.

Отже, відкриємо термінал:

* Mac OS X: Відкрийте Spotlight, введіть *Terminal* та натисніть по додатку *Terminal*.
* Windows: Натисніть Start та знайдіть *Command Prompt*, потім натисніть *Command Prompt with Ruby on Rails*.
* Linux (Ubuntu/Fedora): Шукайте *Terminal* у рядку пошуку та натисніть по додатку *Terminal*.
* Cloud service (наприклад Codenvy): Увійдіть у свій обліковий запис, створіть проект та перемкніться на його IDE (читайте [інструкії для встановлення](/install#using-a-cloud-service) для деталей). Термінал зазвичай відображається у нижній частині вікна вашого веб оглядача.

Далі, виконайте наступні команди у терміналі:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p>Ви можете переконатись, що директорія із назвою <code>projects</code> була створена, виконавши команду: <code>ls</code>. Ви повинні побачити директорію <code>projects</code> у отриманому списку. Тепер вам потрібно змінити вашу поточну директорію на <code>projects</code>, виконавши:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>Ви можете переконатись, що зараз Ви у порожній директорії, виконавши вже знайому вам команду <code>ls</code>. Тепер вам потрібно створити новий додаток із назвою <code>railsgirls</code>:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Це створить новий додаток у директорії <code>railsgirls</code>, тож нам знову потрібно змінити поточну директорію, щоб опинитись всередині нашого Rails додатку:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Якщо ви знову виконаєте <code>ls</code> всередині директорії, ви повинні побачити у списку директорії <code>app</code> та <code>config</code>. Тепер ви можете запустити сервер rails, виконавши:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
<p>Ви можете переконатись, що директорія із назвою <code>projects</code> була створена, виконавши команду: <code>dir</code>. Ви повинні побачити директорію <code>projects</code> у отриманому списку. Тепер вам потрібно змінити вашу поточну директорію на <code>projects</code>, виконавши:</p>
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
<p>Ви можете переконатись, що зараз Ви у порожній директорії, виконавши вже знайому вам команду <code>dir</code>. Тепер вам потрібно створити новий додаток із назвою <code>railsgirls</code>:</p>
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
<p>Це створить новий додаток у директорії <code>railsgirls</code>, тож нам знову потрібно змінити поточну директорію, щоб опинитись всередині нашого Rails додатку:</p>
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
<p>Якщо ви знову виконаєте <code>dir</code> всередині директорії, ви повинні побачити у списку директорії <code>app</code> та <code>config</code>. Тепер ви можете запустити сервер rails, виконавши:</p>
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>
</div>


Відкрийте <http://localhost:3000> у вашому веб оглядачі. Якщо ви використовуєте cloud service (наприклад Codenvy), використовуйте їхній функціонал попереднього перегляду (читайте [інструкії для встановлення](/install#using-a-cloud-service) для деталей).

Ви повинні побачити сторінку з логотипом Rails і заголовком "Yay! You’re on Rails!", що свідчитиме про успіх генерації вашого проекту.

Зверніть увагу, що у цьому вікні командний рядок недоступний, тому що ви запустили сервер Rails, командний рядок виглядає наступним чином:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

# TODO: translate
**Tip:** Sometimes, both in this guide and other guides online, you will see commands written with the `$` symbol at the start. This is a convention that signifies the beginning of a line that needs to be entered into your Terminal / Command Prompt.
You do not need to type this symbol at the start of your commands. Your particular prompt may not have a `$` symbol at the start of it.


Коли командний рядок недоступний, ви не можете виконувати нові команди. Якщо ви спробуєте виконати `cd` чи будь-яку іншу команду, вона не спрацює. Щоб повернутися у звичний режим:

Натисніть <kbd>Ctrl</kbd>+<kbd>C</kbd> у терміналі, щоб зупинити сервер Rails.

**Наставник:** Пояснює, що виконує кожна команда. Що було згенеровано? Що робить сервер?

## *2.*Створюємо scaffold для Idea

Ми будемо використовувати функцію Rails, яка називається scaffold. Вона дає можливість нам швидко створити точку для старту, що дозволить переглядати, додавати, видаляти, редагувати та переглядати об’єкти (list, add, remove, edit, view things), у нашому випадку це ідеї.

**Наставник:** Що таке Rails scaffolding? (Поясніть команду, назву моделі і згенеровану таблицю у БД, угоди найменування, типи і атрибути, тощо.) Що таке міграції і для чого вони нам потрібні?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

Генератор (scaffold) створює нові файли у директорії вашого проекту, однак для того, щоб все запрацювало нам слід виконати кілька інших команд, щоб оновити нашу БД та перезапустити сервер.

{% highlight sh %}
rails db:migrate
rails server
{% endhighlight %}

Відкрийте <http://localhost:3000/ideas> у вашому веб оглядачі. Користувачі, що використовують cloud service (наприклад Codenvy) повинні додати '/ideas' до їхньої адреси для перегляду (читайте [інструкії для встановлення](/install#using-a-cloud-service)).

Огляньте і потестуйте те, що ви створили скориставшись кількома простими командами у терміналі.

Натисніть <kbd>Ctrl</kbd>+<kbd>C</kbd> у терміналі, щоб зупинити сервер Rails, коли вам набридне досліджувати створений сайт.

## *3.* Дизайн


**Наставник:** Talk about the relationship between HTML and Rails. What part of views is HTML and what is Embedded Ruby (ERB)? What is MVC and how does this relate to it? (Models and controllers are responsible for generating the HTML views.)

The app doesn't look very nice yet. Let's do something about that. We'll use the Twitter Bootstrap project to give us nicer styling really easily.

Open `app/views/layouts/application.html.erb` in your text editor and above the line

{% highlight erb %}
<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
{% endhighlight %}

add

{% highlight erb %}
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.css">
{% endhighlight %}

and replace

{% highlight erb %}
<%= yield %>
{% endhighlight %}

with

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Let's also add a navigation bar and footer to the layout. In the same file, under `<body>` add

{% highlight html %}
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">The Idea app</a>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

and before `</body>` add

{% highlight erb %}
<footer>
  <div class="container">
    Rails Girls <%= Time.now.year %>
  </div>
</footer>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.js"></script>
{% endhighlight %}

Now let's also change the styling of the ideas table. Open `app/assets/stylesheets/application.css` and at the bottom add

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle; border: none; }
th { border-bottom: 1px solid #DDD; }
{% endhighlight %}

Now make sure you saved your files and refresh the browser to see what was changed. Nothing changed? It might be that you're not connected to the wifi anymore.
You can change the HTML & CSS further, adding to `app/assets/stylesheets/application.css`.

**Наставник:** Talk a little about CSS and layouts.


## *4.* Adding picture uploads

We need to install a piece of software to let us upload files in Rails.

Open `Gemfile` in the project directory using your text editor and under the line

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

add

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Наставник:** Explain what libraries are and why they are useful. Describe what open source software is.

Hit <kbd>Ctrl</kbd>+<kbd>C</kbd> in the terminal to quit the server.

In the terminal run:

{% highlight sh %}
bundle
{% endhighlight %}

Now we can generate the code for handling uploads. In the terminal run:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

If an error is shown that the uploader cannot be found also add the following line:
{% highlight ruby %}
gem 'net-ssh'
{% endhighlight %}

If you added this gem, please run in your terminal again:

{% highlight sh %}
bundle
{% endhighlight %}

Open `app/models/idea.rb` and under the line

{% highlight ruby %}
class Idea < ApplicationRecord
{% endhighlight %}

add

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

Open `app/views/ideas/_form.html.erb` and change

{% highlight erb %}
<%= form.text_field :picture, id: :idea_picture  %>
{% endhighlight %}

to

{% highlight erb %}
<%= form.file_field :picture, id: :idea_picture %>
{% endhighlight %}

In your file it might actually say `<%= f.text_field :picture, id: :idea_picture %>`, just roll with it.
In your browser, add new idea with a picture. When you upload a picture it doesn't look nice because it only shows a path to the file, so let's fix that.

To show the picture in the page of the idea itself, open `app/views/ideas/show.html.erb` and change

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

to

{% highlight erb %}
<%= image_tag(@idea.picture_url, width: 600) if @idea.picture.present? %>
{% endhighlight %}

To make sure that the picture is also shown in the overview of ideas, open `app/views/ideas/index.html.erb`. Change the line

{% highlight erb %}
<%= idea.picture %>
{% endhighlight %}

to

{% highlight erb %}
<%= image_tag idea.picture_url, width: '100%' if idea.picture.present? %>
{% endhighlight %}

Now refresh your browser to see what changed.
Note: Some people might be using a second terminal to run the rails server continuously.

**Наставник:** Talk a little about HTML.


## *5.* Finetune the routes

Open <http://localhost:3000> (or your preview url, if you are using a cloud service). It still shows the "Yay! You’re on Rails!" page. Let's make it redirect to the ideas page.

Open `config/routes.rb` and after the first line add

{% highlight ruby %}
root to: redirect('/ideas')
{% endhighlight %}

Test the change by opening the root path (that is, <http://localhost:3000/> or your preview url) in your browser.

**Наставник:** Talk about routes, and include details on the order of routes and their relation to static files.

## *6.* Create static page in your app

Lets add a static page to our app that will hold information about the author of this application — you!

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

This command will create you a new folder under `app/views` called `/pages` and under that a file called `info.html.erb` which will be your info page.

It also adds a new simple route to your routes.rb.

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

Now you can open the file `app/views/pages/info.html.erb` and add information about you in HTML. To see your new info page, take your browser to <http://localhost:3000/pages/info> or, if you are a cloud service user, append '/pages/info' to your preview url.

## *7.* Add a button to your navigation bar

Now that we know your new static page works, let's make sure people can visit it by creating a button for it in the navigation bar.

Open `app/views/layouts/application.html.erb` in your text editor and under the line

{% highlight html %}
<li><a href="/ideas">Ideas</a></li>
{% endhighlight %}

add

{% highlight html %}
<li><a href="/pages/info">Info</a></li>
{% endhighlight %}

Refresh the page in your browser and click the newly created link to see if it works!

## *8+.*What's next?

* Add design using HTML &amp; CSS
* Add ratings
* Use CoffeeScript (or JavaScript) to add interaction
* Add picture resizing to make loading the pictures faster

## Other Guides

* [Handy cheatsheet for Ruby, Rails, console etc.](http://www.pragtob.info/rails-beginner-cheatsheet/)
* Guide 1: [Guide to install Rails](/install) (You probably already did this one!)
* Guide 2: [Build Your First App](/app) (This current page!)
* Guide 3: [Push Your App to GitHub](/github)
* Guide 4: Put your app online with...
    * [Heroku](/heroku) / [OpenShift](/openshift) / [anynines](/anynines) / [Engine Yard](/engineyard) / [prepare for deployment with Phusion Passenger](/passenger)
* Guide 5: [Allow Comments on Your App](/commenting)
* Guide 6: [Add design using HTML &amp; CSS](/design)
* Guide 7: [Create thumbnails with Carrierwave](/thumbnails)
* Guide 8: [Add Authentication (user accounts) with Devise](/devise)
* Guide 9: [Add Profile Pics with Gravatar](/gravatar)
* Guide 10: [Improve your design with HTML and CSS](/design-html-css)
* Guide 11: Continuous Deployment
    * [Test your app with RSpec](testing-rspec) / [Ease up development with Phusion Passenger](/passenger) / [Simplifying your tests with Shoulda Matchers](testing-shoulda-matchers) / [CD with Travis-CI](/continuous-travis) / [CD with Codeship](/continuous)
* Guide 12: [Build a voting app in Sinatra](/sinatra-app)
* Guide 13: [Build a diary app in Ruby on Rails](diary-app)
* Guide 14: [Add a back-end to your app (admin pages)](/backend-with-active-admin)
* Guide 15: [Go through additional explanations for the App](https://github.com/lbain/railsgirls)
