---
layout: default
title: Rails Girls App Tutorial
permalink: app
---

# Rails Girls App Tutorial

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**Переконайсь, що у тебе встановлено Rails.** Якщо ж ні, [**скористайся інструкціями для встановлення**](/install).

## Знайомство з інструментами

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>

### Текстовий редактор

* [Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com),  Vim та Emacs є прикладами текстових редакторів, що можуть використовуватись для написання коду та редагування файлів.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Термінал (також відомий як Командний Рядок у Windows)

* Тут ви стартуєте сервер rails та виконуєте команди.
* Термінал це програма на вашому комп'ютері, яку можна запустити використовуючи пошук Spotlight на Mac (пошукайте "Terminal") або шукаючи "Командний рядок" у ваших програмах на Windows

<h3><i class="icon-browser">&nbsp;</i></h3>

### Веб оглядач

* (Firefox, Safari, Chrome) знадобляться тобі для перегляду створеного вами додатку.

</div>


Під час проходження інструкцій ви будете бачити частинки коду, відформатовані як:

{% highlight sh %}
some code
{% endhighlight %}

<div>
<p>Це означатиме, що виділений текст є кодом і повинен бути виконаний або надрукований у одному із файлів проекту. Іконка одразу після виділеного тексу підкаже вам, що саме використовувати.</p>
<p>До прикладу, якщо ви бачите іконку терміналу після виділеного тексу, як у прикладі зверху, то вам потрібно скопіювати команду(и) і виконати її у вашому терміналі (Terminal в Mac & Command Prompt у Widnows)</p>
</div>

Need some reminders along the way? Check out this [handy cheatsheet for Ruby, Rails, console etc.](http://www.pragtob.info/rails-beginner-cheatsheet/)

### Важливо

Важлива ремарка: ви повинні обрати інструкції відповідно до вашої операційної системи, оскільки команди, які потрібно виконати на Windows дещо відрізняються від команд для Mac або Linux. Якщо ви стикнулись із проблемами — перевірте перемикач операційних систем знизу під командами. У випадку, якщо ви користуєтесь cloud service (наприклад Codeenvy), використовуйте команди, призначені для Linux (навіть у випадку, якщо ви у цей час користуєтесь Windows).

## *1.*Створення додатку

Ми створимо новий Rails додаток і назвемо його *railsgirls*.

Отже, відкриємо термінал:
* Mac OS X: Відкрийте Spotlight, введіть *Terminal* та натисніть по додатку *Terminal*.
* Windows: Натисніть Start та знайдіть *Command Prompt*, потім натисніть *Command Prompt with Ruby on Rails*.
* Linux (Ubuntu/Fedora): Шукайте *Terminal* у рядку пошуку та натисніть по додатку *Terminal*.
* Cloud service (наприклад Codenvy): Увійдіть у свій обліковий запис, створіть проект та перемкніться на його IDE (читайте [інструкії для встановлення](/install#using-a-cloud-service) для деталей). Термінал зазвичай відображається у нижній частині вікна вашого веб оглядача.


Далі, виконай наступні команди у терміналі:

<div class="os-specific">
  <div class="nix">
    {% highlight sh %}
    mkdir projects
    {% endhighlight %}

    <div>
      <p>
        Можна переконатись переконатись, що директорія із назвою <code>projects</code> була створена, виконавши команду: <code>ls</code>. Можна побачити директорію <code>projects</code> у отриманому списку. Тепер потрібно змінити поточну директорію на <code>projects</code>, виконавши:
      </p>
    </div>

    {% highlight sh %}
    cd projects
    {% endhighlight %}

    <div>
      <p>Ти можеш переконатись, що зараз знаходишся у порожній директорії, виконавши вже знайому команду <code>ls</code>. Тепер потрібно створити новий додаток із назвою <code>railsgirls</code>:</p>
    </div>

    {% highlight sh %}
    rails new railsgirls
    {% endhighlight %}

    <div>
      <p>Це створить новий додаток у директорії <code>railsgirls</code>, тож тобі знову потрібно змінити поточну директорію, щоб опинитись всередині нашого Rails додатку:</p>
    </div>

    {% highlight sh %}
    cd railsgirls
    {% endhighlight %}

    <div>
      <p>Якщо ти знову виконаєш <code>ls</code> всередині директорії, то побачишу списку директорій <code>app</code> та <code>config</code>. Тепер ви можете запустити сервер rails, виконавши:</p>
    </div>

    {% highlight sh %}
    rails server
    {% endhighlight %}

  </div>

  <div class="win">
    {% highlight sh %}
    mkdir projects
    {% endhighlight %}

    <div>
      <p>Можна переконатись, що директорія із назвою <code>projects</code> була створена, виконавши команду: <code>dir</code>. Ти повинна побачити директорію <code>projects</code> у отриманому списку. Тепер потрібно змінити поточну директорію на <code>projects</code>, виконавши:</p>
    </div>

    {% highlight sh %}
    cd projects
    {% endhighlight %}

    <div>
      <p>Ти можеш переконатись, що зараз знаходишся у порожній директорії, виконавши вже знайому команду <code>dir</code>. Тепер потрібно створити новий додаток із назвою <code>railsgirls</code>:</p>
    </div>

    {% highlight sh %}
    rails new railsgirls
    {% endhighlight %}

    <div>
      <p>Це створить новий додаток у директорії <code>railsgirls</code>, тож тобі знову потрібно змінити поточну директорію, щоб опинитись всередині нашого Rails додатку:</p>
    </div>

    {% highlight sh %}
    cd railsgirls
    {% endhighlight %}

    <div>
      <p>Якщо ти знову виконаєш <code>dir</code> всередині директорії, то побачишу списку директорій <code>app</code> та <code>config</code>. Тепер ви можете запустити сервер rails, виконавши:</p>
    </div>

    {% highlight sh %}
    rails server
    {% endhighlight %}
  </div>
</div>

Відкрийте <http://localhost:3000> у вашому веб оглядачі. Якщо ви використовуєте cloud service (наприклад Codenvy), використовуйте їхній функціонал попереднього перегляду (читайте [інструкії для встановлення](/install#using-a-cloud-service) для деталей).

Ви повинні побачити сторінку з логотипом Rails і заголовком "Yay! You’re on Rails!", що свідчитиме про успіх генерації вашого проекту.

Зверни увагу, у цьому вікні командний рядок недоступний, тому що ти запустила сервер Rails. Командний рядок виглядає наступним чином:

<div class="os-specific">
  <div class="nix">
    {% highlight sh %}
    $
    {% endhighlight %}
  </div>
  <div class="win">
    {% highlight sh %}
    >
    {% endhighlight %}
  </div>
</div>

**Підказка:** Інколи у різних інструкціях ти можеш побачити команди, що написані з символом `$` напочатку. Це домовленість, що означає початок рядку, яку треба ввести у термінал.
Тобі не потрібно вводити цей символ на спочатку команди. Твій командний рядок може не мати символу `$` на початку команди.

Коли командний рядок недоступний, ви не можете виконувати нові команди. Якщо ви спробуєте виконати `cd` чи будь-яку іншу команду, вона не спрацює. Щоб повернутися у звичний режим:

Натисніть <kbd>Ctrl</kbd>+<kbd>C</kbd> у терміналі, щоб зупинити сервер Rails.

**Наставник:** Поясніть, що виконує кожна команда. Що було згенеровано? Що робить сервер?

## *2.*Створюємо scaffold для Idea

Ми будемо використовувати функцію Rails, яка називається scaffold. Вона дає можливість швидко створити точку для старту, що дозволить переглядати, додавати, видаляти, редагувати та переглядати об’єкти (list, add, remove, edit, view things), у нашому випадку це ідеї.

**Наставник:** Що таке Rails scaffolding? (Поясніть команду, назву моделі і згенеровану таблицю у БД, угоди найменування, типи і атрибути, тощо.) Що таке міграції і для чого вони нам потрібні?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

Генератор (scaffold) створює нові файли у директорії проекту, однак для того, щоб все запрацювало, тобі слід виконати кілька інших команд. Вони оновлять нашу БД та перезапустять сервер.

<div class="os-specific">
  <div class="nix">
    {% highlight sh %}
    rake db:migrate
    rails server
    {% endhighlight %}
  </div>
  <div class="win">
    {% highlight sh %}
    ruby bin/rake db:migrate
    rails server
    {% endhighlight %}
  </div>
</div>

Відкрийте <http://localhost:3000/ideas> у вашому веб оглядачі. Користувачі, що використовують cloud service (наприклад Codenvy) повинні додати '/ideas' до їхньої адреси для перегляду (читайте [інструкії для встановлення](/install#using-a-cloud-service)).


Огляньмо і потестуймо те, що ти створила скориставшись кількома простими командами у терміналі.

Натисніть <kbd>Ctrl</kbd>+<kbd>C</kbd> у терміналі, щоб зупинити сервер Rails, коли вам набридне досліджувати створений сайт.

## *3.* Дизайн

**Наставник:** Розказати про зв'язок між HTML і Rails. Якою частиною шаблонів (views) є HTML і що таке Embedded Ruby (ERB)? Що таке MVC і як це його стосується? (Моделі та контроллери відповідальні за генерацію HTML шаблонів.)

Наш додаток поки виглядає не дуже привабливо. Давай прикрасимо його. Ми будемо використовувати Twitter Bootstrap щоб легко і просто стилізувати наш сайт.

Відкриємо `app/views/layouts/application.html.erb` у текстовому редакторі і над рядком

{% highlight erb %}
<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
{% endhighlight %}

додамо

{% highlight erb %}
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.css">
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.css">
{% endhighlight %}

і замінимо

{% highlight erb %}
<%= yield %>
{% endhighlight %}

на

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Давай також додамо панель  навігації і нижню частину до сайту. У тому ж самому файлі під тегом `<body>` додамо

{% highlight html %}
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">The Idea app</a>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

і перед `</body>` додамо

{% highlight erb %}
<footer>
  <div class="container">
    Rails Girls Lviv <%= Time.now.year %>
  </div>
</footer>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.js"></script>
{% endhighlight %}

Тепер давай змінимо вигляд таблиці з ідеями. Відкрий `app/assets/stylesheets/application.css` і внизу файла додай

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle; border: none; }
th { border-bottom: 1px solid #DDD; }
{% endhighlight %}

Тепер переконаємося, що ми зберегли всі зміни і оновимо сторінку в браузері. Може трапитись, що ти більше не під'єднаний до інтернету, перевір це. Ти також можеш продовжувати змінювати HTML & CSS, редагуючи `app/assets/stylesheets/application.css`.

У випадку, якщо у терміналі відображається повідомлення про проблеми із JavaScript або CoffeeScript, встанови [nodejs](http://nodejs.org/download/). Ця проблема не мала б з'являтись, якщо ми використовували RailsInstaller (лише якщо ти встановлювала Rails через ```gem install rails```).

**Наставник:** Розкажіть трохи про CSS і макети (layouts).

## *4.*Додаємо зображення на сторіку.

Нам потрібно встановити додаткову бібліотеку, яка дозволить завантажувати файли.

За допомогою текстового редактора відкриємо `Gemfile` в директорії проекту і під рядком

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

додай

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Наставник:** Пояснити, що таке бібліотеки і чим вони корисні. Розказати про вільне програмне забезпечення (open source).

Натисни <kbd>Ctrl</kbd>+<kbd>C</kbd> у терміналі, щоб зупинити сервер Rails.

У терміналі запустимо:

{% highlight sh %}
bundle
{% endhighlight %}

Це встановить бібліотеку, додані до `Gemfile`.

Тепер ми можемо згенерувати код, який буде відповідати за завантаження. Запустимо у терміналі:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}


Якщо відображається помилка, що uploader не може бути знайдений, спробуйте додати наступний рядок:
{% highlight ruby %}
gem 'net-ssh'
{% endhighlight %}

Якщо ви додали цей гем, виконайте іще раз наступну команду:

{% highlight sh %}
bundle
{% endhighlight %}

Після цього запустимо сервер rails.

*Увага*: Дехто може використовувати другий термінал, у якому постійно запущений сервер Rails. В такому випадку потрібно **перезапустити Rails процес**. Це необхідно для того, щоб додаток завантажив додану бібліотеку.

Відкриємо `app/models/idea.rb` і під рядком

{% highlight ruby %}
class Idea < ApplicationRecord
{% endhighlight %}

додамо

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

Відкриємо `app/views/ideas/_form.html.erb` і замінимо

{% highlight erb %}
<%= form.text_field :picture, id: :idea_picture  %>
{% endhighlight %}

на

{% highlight erb %}
<%= form.file_field :picture, id: :idea_picture %>
{% endhighlight %}


У вашому файлі може насправді писати `<%= f.text_field :picture, id: :idea_picture %>`, не хвилюйтесь і просто замініть `text_field` на `file_field`.
Додайте наступну ідею у браузері уже з картинкою. На жаль, отриманий результат не надто красивий, оскільки замість картинки ми бачимо лиш шлях до неї. Давайте виправимо це разом.

Щоб відобразити картинку, у файлі  `app/views/ideas/show.html.erb` потрібно замінити рядок

{% highlight erb %}
<%= idea.picture %>
{% endhighlight %}

на

{% highlight erb %}
<%= image_tag idea.picture_url, width: '100%' if idea.picture.present? %>
{% endhighlight %}

Тепер можна оновити сторінку в браузері і милуватись завантаженим зображенням.

**Наставник:** Трішки розкажіть про HTML.


## *5.*Налаштування маршрутів

Відкрий <http://localhost:3000> (або url поперднього перегляду, якщо ти використовуєш cloud service). Ти все ще бачиш сторінку "Yay! You’re on Rails!". Давай зробимо перенаправлення на сторінку з ідеями.

Відкриємо `config/routes.rb` і після першого рядку додамо:

{% highlight ruby %}
root to: redirect('/ideas')
{% endhighlight %}

Щоб перевірити зміни, відкрий кореневий шлях (<http://localhost:3000/> або url попереднього перегляду для cloud service) у своєму браузері.

**Наставник:** Розказати про маршрути, включно із деталями про їх порядок і зв'язок зі статичними файлами.

## *6.* Створимо статичну сторінку

Давай додамо статичну сторінку, в якій міститиметься інформація про автора додатку - тебе!

{% highlight sh %}
rails generate controller pages info
{% endhighlight %}

Ця команда створить нову директорію всередині `app/views`, яка називатиметься `/pages` і міститиме файл `info.html.erb`, який і є нашою інформаційною сторінкою.

Також це додасть простий маршрут до `routes.rb`

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

Терер можна відкрити `app/views/pages/info.html.erb` і додати інформацію про себе в HTML. Щоб поглянути на нову сторінку, у браузері перейди до <http://localhost:3000/pages/info> або, якщо ти користуєшся cloud service, додай `/pages/info` до свого url попереднього перегляду.

## *7.* Add a button to your navigation bar

Now that we know your new static page works, let's make sure people can visit it by creating a button for it in the navigation bar.

Open `app/views/layouts/application.html.erb` in your text editor and under the line

{% highlight html %}
<li><a href="/ideas">Ideas</a></li>
{% endhighlight %}

add

{% highlight html %}
<li><a href="/pages/info">Info</a></li>
{% endhighlight %}

Refresh the page in your browser and click the newly created link to see if it works!

## *8+.*Що далі?

* Стилізуй дизайн використовуючи HTML &amp; CSS
* Додай оцінки
* Використовуй CoffeeScript (або JavaScript) щоб додати інтерактивної взаємодії
* Додай зміну розмірів картинок, щоб вони вантажились швидше

## Додаткова інформація

* [Handy cheatsheet for Ruby, Rails, console etc.](http://www.pragtob.info/rails-beginner-cheatsheet/)
* Guide 1: [Інструкція по встановленню Rails](/install) (Скоріш за все ви вже зробили це!)
* Guide 2: [Напишіть ваш перший додаток](/app) (Це поточна сторінка!)
* Guide 3: [Зберігаємо ваш проект на GitHub](/github)
* Guide 4: Розгортаємо ваш проект онлайн із допомогою...
    * [Heroku](/heroku) / [OpenShift](/openshift) / [anynines](/anynines) / [Engine Yard](/engineyard) / [підготовка до розгортання із Phusion Passenger](/passenger)
* Guide 5: [Додаємо коментування](/commenting)
* Guide 6: [Додамо дизайну за допомогою HTML &amp; CSS](/design)
* Guide 7: [Створюємо мініатюри Carrierwave](/thumbnails)
* Guide 8: [Додаємо можливість реєстрації користувачів з використанням Devise](/devise)
* Guide 9: [Додаємо аватари за допомогою Gravatar](/gravatar)
* Guide 10: [Покращуємо дизайн з використанням HTML and CSS](/design-html-css)
* Guide 11: Continuous Deployment
    * [Тестування з RSpec](testing-rspec) / [Спрощення розробки із Phusion Passenger](/passenger) / [Спрощуємо ваші тести за допомогою Shoulda Matchers](testing-shoulda-matchers) / [CD з Travis-CI](/continuous-travis) / [CD з Codeship](/continuous)
* Guide 12: [Побудуйте додаток для голосувань разом із Sinatra](/sinatra-app)
* Guide 13: [Напишіть ваш блоґ із Ruby on Rails](diary-app)
* Guide 14: [Додайте адміністративну панель до вашого додатку (сторінки для адміністратора)](/backend-with-active-admin)
* Guide 15: [Проглянути розширені коментарі до додатку](https://github.com/lbain/railsgirls)
